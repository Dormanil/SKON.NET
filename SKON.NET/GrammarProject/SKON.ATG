using System.Collections.Generic;
using System.Globalization;

COMPILER SKON

    public SKONObject data;

	private string[] dateTimeFormats = {
        "yyyy-MM-dd",
        "hh:mm:ssZ",
        "hh:mm:ss.fffZ",
        "hh:mm:sszzz",
        "hh:mm:ss.fffzzz",
        "yyyy-MM-ddThh:mm:ssZ",
        "yyyy-MM-ddThh:mm:ss.fffZ",
        "yyyy-MM-ddThh:mm:sszzz",
        "yyyy-MM-ddThh:mm:ss.fffzzz"
    };

    private DateTime ParseDatetime(string value)
    {
        if (value[0] == '@')
        {
            return UnixTimeStampToDateTime(long.Parse(value.Substring(1)));
        }else
        {
            DateTime dateTime;

            if (DateTime.TryParseExact(value, dateTimeFormats, null, DateTimeStyles.None, out dateTime))
            {
                return dateTime;
            }
            else
            {
                throw new FormatException("Could not parse " + value + "as a datetime!");
            }
        }
    }

	public static DateTime UnixTimeStampToDateTime( double unixTimeStamp )
	{
		// Unix timestamp is seconds past epoch
		System.DateTime dtDateTime = new DateTime(1970,1,1,0,0,0,0,System.DateTimeKind.Utc);
		dtDateTime = dtDateTime.AddSeconds( unixTimeStamp ).ToLocalTime();
		return dtDateTime;
	}

	// Return the n-th token after the current lookahead token
	Token Peek (int n) {
		scanner.ResetPeek();
		Token x = la;
		while (n > 0) { x = scanner.Peek(); n--; }
		return x;
	}

	/* True, if the comma is not a trailing one, *
	 * like the last one in: a, b, c,            */
	bool NotFinalComma () {
		int peek = Peek(1).kind;
		return la.kind == _comma && peek != _rbrace && peek != _rbracket && peek != _EOF;
	}

/*-------------------------------------------------------------------------*/
CHARACTERS
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  digit     = "0123456789".
  cr        = '\r'.
  lf        = '\n'.
  tab       = '\t'.  
  stringch  = ANY - '"' - '\\' - cr - lf.
  charch    = ANY - '\'' - '\\' - cr - lf.
  printable =  '\u0020' .. '\u007e'.
  escapech    = "bnfrt/" + '\\' + '"'.  
  hex       = "0123456789abcdefABCDEF".
  dot       = '.'.

TOKENS
  colon     = ':'.
  comma     =  ','.
  lbrace    = '{'.
  rbrace    = '}'.
  lbracket  = '['.
  rbracket  = ']'.
  ident     = letter { letter | digit }.
  string_   = '"' { stringch | '\\' escapech | '\\' 'u' hex hex hex hex} '"'.
  badString = '"' { stringch | '\\' escapech } (cr | lf).
  integer_  = ['-'] digit {digit}.
  double_   = ['-'] digit {digit} (((dot digit {digit}) [('E' | 'e') [('+' | '-')] digit {digit}]) | (('E' | 'e') [('+' | '-')] digit {digit})).
  datetime_	= ('@' digit {digit}
			| digit digit digit digit '-' digit digit '-' digit digit
			| digit digit ':' digit digit ':' digit digit ('Z'|'z')
			| digit digit ':' digit digit ':' digit digit '.' digit digit digit ('Z'|'z')
			| digit digit ':' digit digit ':' digit digit ('+'|'-') digit digit ':' digit digit
			| digit digit ':' digit digit ':' digit digit '.' {digit} ('+'|'-') digit digit ':' digit digit
			| digit digit digit digit '-' digit digit '-' digit digit ('T' | 't') digit digit ':' digit digit ':' digit digit ('Z'|'z')
			| digit digit digit digit '-' digit digit '-' digit digit ('T' | 't') digit digit ':' digit digit ':' digit digit '.' digit digit digit ('Z'|'z')
			| digit digit digit digit '-' digit digit '-' digit digit ('T' | 't') digit digit ':' digit digit ':' digit digit ('+'|'-') digit digit ':' digit digit
			| digit digit digit digit '-' digit digit '-' digit digit ('T' | 't') digit digit ':' digit digit ':' digit digit '.' digit digit digit ('+'|'-') digit digit ':' digit digit).


COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO cr

IGNORE ' ' + '\r' + '\t' + '\n'

PRODUCTIONS
/*-------------------------------------------------------------------------*/
SKON															(. Dictionary<string, SKONObject> mapElements;
																	string key; SKONObject value;
																	mapElements = new Dictionary<string, SKONObject>();
																.)
=	[												
        map_element<out key, out value>							(. mapElements[key] = value; .)
		{ 
			IF(NotFinalComma())
            comma 
            map_element <out key, out value>					(. mapElements[key] = value; .)
        }
		[
			comma
		]
    ]															(. this.data = new SKONObject(mapElements); .)
    .															

/*-------------------------------------------------------------------------*/
skon_map<out SKONObject map>									(. Dictionary<string, SKONObject> mapElements; .)
=	lbrace
    open_map<out mapElements>									(. map = new SKONObject(mapElements); .)
    rbrace
    .

/*-------------------------------------------------------------------------*/
skon_array<out SKONObject array>								(. List<SKONObject> arrayElements; .)
=	lbracket
    open_array<out arrayElements>								(. array = new SKONObject(arrayElements); .)
    rbracket
    .

/*-------------------------------------------------------------------------*/
open_map<. out Dictionary<string, SKONObject> mapElements .>	(. string key; SKONObject value; mapElements = new Dictionary<string, SKONObject>(); .)
=	[												
        map_element<out key, out value>							(. mapElements[key] = value; .)
		{ 
			IF(NotFinalComma())
            comma 
            map_element <out key, out value>					(. mapElements[key] = value; .)
        }
        [
            comma
        ]
    ]
    .

/*-------------------------------------------------------------------------*/
map_element<out string key, out SKONObject obj>					(. string name; SKONObject skonObject; .)
=	Ident<out name>												(. key = name; .)
    colon 
    value<out skonObject>										(. obj = skonObject; .)
    .

/*------------------------------------------------------------------------*/
Ident<out string name>
= ident															(. name = t.val; .).

/*-------------------------------------------------------------------------*/
open_array<. out List<SKONObject> arrayElements .>				(. SKONObject skonObject; arrayElements = new List<SKONObject>(); .)
=	[															
        value<out skonObject>									(. arrayElements.Add(skonObject); .)
		{ 
			IF(NotFinalComma())
            comma 
            value<out skonObject>								(. arrayElements.Add(skonObject); .)
        }
        [
            comma
        ] 
    ]
    .

/*-------------------------------------------------------------------------*/
value<out SKONObject skonObject>								(. skonObject = null; .)
=	string_														(. skonObject = new SKONObject(t.val.Substring(1, t.val.Length - 2)); .)
    | integer_													(. skonObject = new SKONObject(int.Parse(t.val)); .)
    | double_													(. skonObject = new SKONObject(double.Parse(t.val, CultureInfo.InvariantCulture)); .)
    | datetime_													(. skonObject = new SKONObject(ParseDatetime(t.val)); .)
	|															(. SKONObject map; .)
		skon_map<out map>										(. skonObject = map; .)
    |															(. SKONObject array; .)
		skon_array<out array>									(. skonObject = array; .)
    | "true"													(. skonObject = new SKONObject(true); .)
    | "false"													(. skonObject = new SKONObject(false); .)
    | "null"													(. skonObject = new SKONObject(); .)
    .												
               
END SKON.