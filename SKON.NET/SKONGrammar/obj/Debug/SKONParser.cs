//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\juliu\Documents\GitHub\SKON.NET\SKON.NET\SKONGrammar\SKON.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SKON.NET {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class SKONParser : Parser {
	public const int
		DATETIME=1, TRUE=2, FALSE=3, KEY=4, OPEN_MAP=5, CLOSE_MAP=6, OPEN_ARRAY=7, 
		CLOSE_ARRAY=8, SEPARATOR=9, DEFINE=10, STRING=11, FLOAT=12, INTEGER=13, 
		COMMENT=14, ML_COMMENT=15, WS=16;
	public const int
		RULE_skon = 0, RULE_open_map = 1, RULE_map = 2, RULE_pair = 3, RULE_open_array = 4, 
		RULE_array = 5, RULE_simple_value = 6, RULE_complex_value = 7, RULE_value = 8;
	public static readonly string[] ruleNames = {
		"skon", "open_map", "map", "pair", "open_array", "array", "simple_value", 
		"complex_value", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'true'", "'false'", null, "'{'", "'}'", "'['", "']'", "','", 
		"':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DATETIME", "TRUE", "FALSE", "KEY", "OPEN_MAP", "CLOSE_MAP", "OPEN_ARRAY", 
		"CLOSE_ARRAY", "SEPARATOR", "DEFINE", "STRING", "FLOAT", "INTEGER", "COMMENT", 
		"ML_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SKON.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SKONParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class SkonContext : ParserRuleContext {
		public Open_mapContext open_map() {
			return GetRuleContext<Open_mapContext>(0);
		}
		public SkonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skon; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.EnterSkon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.ExitSkon(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISKONVisitor<TResult> typedVisitor = visitor as ISKONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkonContext skon() {
		SkonContext _localctx = new SkonContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_skon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; open_map();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_mapContext : ParserRuleContext {
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode[] SEPARATOR() { return GetTokens(SKONParser.SEPARATOR); }
		public ITerminalNode SEPARATOR(int i) {
			return GetToken(SKONParser.SEPARATOR, i);
		}
		public Open_mapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_map; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.EnterOpen_map(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.ExitOpen_map(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISKONVisitor<TResult> typedVisitor = visitor as ISKONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_map(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_mapContext open_map() {
		Open_mapContext _localctx = new Open_mapContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_open_map);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; pair();
			State = 25;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 21; Match(SEPARATOR);
					State = 22; pair();
					}
					} 
				}
				State = 27;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			State = 29;
			_la = _input.La(1);
			if (_la==SEPARATOR) {
				{
				State = 28; Match(SEPARATOR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapContext : ParserRuleContext {
		public ITerminalNode OPEN_MAP() { return GetToken(SKONParser.OPEN_MAP, 0); }
		public Open_mapContext open_map() {
			return GetRuleContext<Open_mapContext>(0);
		}
		public ITerminalNode CLOSE_MAP() { return GetToken(SKONParser.CLOSE_MAP, 0); }
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.EnterMap(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.ExitMap(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISKONVisitor<TResult> typedVisitor = visitor as ISKONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_map);
		try {
			State = 37;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 31; Match(OPEN_MAP);
				State = 32; open_map();
				State = 33; Match(CLOSE_MAP);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35; Match(OPEN_MAP);
				State = 36; Match(CLOSE_MAP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode KEY() { return GetToken(SKONParser.KEY, 0); }
		public ITerminalNode DEFINE() { return GetToken(SKONParser.DEFINE, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISKONVisitor<TResult> typedVisitor = visitor as ISKONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(KEY);
			State = 40; Match(DEFINE);
			State = 41; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_arrayContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode[] SEPARATOR() { return GetTokens(SKONParser.SEPARATOR); }
		public ITerminalNode SEPARATOR(int i) {
			return GetToken(SKONParser.SEPARATOR, i);
		}
		public Open_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.EnterOpen_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.ExitOpen_array(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISKONVisitor<TResult> typedVisitor = visitor as ISKONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_arrayContext open_array() {
		Open_arrayContext _localctx = new Open_arrayContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_open_array);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; value();
			State = 48;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 44; Match(SEPARATOR);
					State = 45; value();
					}
					} 
				}
				State = 50;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			State = 52;
			_la = _input.La(1);
			if (_la==SEPARATOR) {
				{
				State = 51; Match(SEPARATOR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode OPEN_ARRAY() { return GetToken(SKONParser.OPEN_ARRAY, 0); }
		public Open_arrayContext open_array() {
			return GetRuleContext<Open_arrayContext>(0);
		}
		public ITerminalNode CLOSE_ARRAY() { return GetToken(SKONParser.CLOSE_ARRAY, 0); }
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISKONVisitor<TResult> typedVisitor = visitor as ISKONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_array);
		try {
			State = 60;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; Match(OPEN_ARRAY);
				State = 55; open_array();
				State = 56; Match(CLOSE_ARRAY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; Match(OPEN_ARRAY);
				State = 59; Match(CLOSE_ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_valueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(SKONParser.STRING, 0); }
		public ITerminalNode DATETIME() { return GetToken(SKONParser.DATETIME, 0); }
		public ITerminalNode INTEGER() { return GetToken(SKONParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(SKONParser.FLOAT, 0); }
		public ITerminalNode TRUE() { return GetToken(SKONParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(SKONParser.FALSE, 0); }
		public Simple_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.EnterSimple_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.ExitSimple_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISKONVisitor<TResult> typedVisitor = visitor as ISKONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_valueContext simple_value() {
		Simple_valueContext _localctx = new Simple_valueContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_simple_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DATETIME) | (1L << TRUE) | (1L << FALSE) | (1L << STRING) | (1L << FLOAT) | (1L << INTEGER))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_valueContext : ParserRuleContext {
		public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public Complex_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.EnterComplex_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.ExitComplex_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISKONVisitor<TResult> typedVisitor = visitor as ISKONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplex_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Complex_valueContext complex_value() {
		Complex_valueContext _localctx = new Complex_valueContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_complex_value);
		try {
			State = 66;
			switch (_input.La(1)) {
			case OPEN_MAP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; map();
				}
				break;
			case OPEN_ARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public Simple_valueContext simple_value() {
			return GetRuleContext<Simple_valueContext>(0);
		}
		public Complex_valueContext complex_value() {
			return GetRuleContext<Complex_valueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISKONListener typedListener = listener as ISKONListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISKONVisitor<TResult> typedVisitor = visitor as ISKONVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_value);
		try {
			State = 70;
			switch (_input.La(1)) {
			case DATETIME:
			case TRUE:
			case FALSE:
			case STRING:
			case FLOAT:
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; simple_value();
				}
				break;
			case OPEN_MAP:
			case OPEN_ARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; complex_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x12K\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\a\x3\x1A\n\x3\f\x3\xE\x3\x1D"+
		"\v\x3\x3\x3\x5\x3 \n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4(\n\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\a\x6\x31\n\x6\f\x6\xE\x6\x34"+
		"\v\x6\x3\x6\x5\x6\x37\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a?\n\a\x3"+
		"\b\x3\b\x3\t\x3\t\x5\t\x45\n\t\x3\n\x3\n\x5\nI\n\n\x3\n\x2\x2\x2\v\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x2\x3\x4\x2\x3\x5\r"+
		"\xFI\x2\x14\x3\x2\x2\x2\x4\x16\x3\x2\x2\x2\x6\'\x3\x2\x2\x2\b)\x3\x2\x2"+
		"\x2\n-\x3\x2\x2\x2\f>\x3\x2\x2\x2\xE@\x3\x2\x2\x2\x10\x44\x3\x2\x2\x2"+
		"\x12H\x3\x2\x2\x2\x14\x15\x5\x4\x3\x2\x15\x3\x3\x2\x2\x2\x16\x1B\x5\b"+
		"\x5\x2\x17\x18\a\v\x2\x2\x18\x1A\x5\b\x5\x2\x19\x17\x3\x2\x2\x2\x1A\x1D"+
		"\x3\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1F\x3\x2\x2"+
		"\x2\x1D\x1B\x3\x2\x2\x2\x1E \a\v\x2\x2\x1F\x1E\x3\x2\x2\x2\x1F \x3\x2"+
		"\x2\x2 \x5\x3\x2\x2\x2!\"\a\a\x2\x2\"#\x5\x4\x3\x2#$\a\b\x2\x2$(\x3\x2"+
		"\x2\x2%&\a\a\x2\x2&(\a\b\x2\x2\'!\x3\x2\x2\x2\'%\x3\x2\x2\x2(\a\x3\x2"+
		"\x2\x2)*\a\x6\x2\x2*+\a\f\x2\x2+,\x5\x12\n\x2,\t\x3\x2\x2\x2-\x32\x5\x12"+
		"\n\x2./\a\v\x2\x2/\x31\x5\x12\n\x2\x30.\x3\x2\x2\x2\x31\x34\x3\x2\x2\x2"+
		"\x32\x30\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x32\x3"+
		"\x2\x2\x2\x35\x37\a\v\x2\x2\x36\x35\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37"+
		"\v\x3\x2\x2\x2\x38\x39\a\t\x2\x2\x39:\x5\n\x6\x2:;\a\n\x2\x2;?\x3\x2\x2"+
		"\x2<=\a\t\x2\x2=?\a\n\x2\x2>\x38\x3\x2\x2\x2><\x3\x2\x2\x2?\r\x3\x2\x2"+
		"\x2@\x41\t\x2\x2\x2\x41\xF\x3\x2\x2\x2\x42\x45\x5\x6\x4\x2\x43\x45\x5"+
		"\f\a\x2\x44\x42\x3\x2\x2\x2\x44\x43\x3\x2\x2\x2\x45\x11\x3\x2\x2\x2\x46"+
		"I\x5\xE\b\x2GI\x5\x10\t\x2H\x46\x3\x2\x2\x2HG\x3\x2\x2\x2I\x13\x3\x2\x2"+
		"\x2\n\x1B\x1F\'\x32\x36>\x44H";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SKON.NET
